location = location,
elected = elected,
votes.pers = votes.pers,
votes.all = votes.all,
valgt.nr = valgt.nr,
stedfor.nr = stedfor.nr,
opstillet.i.kreds.nr = opstillet.i.kreds.nr,
nomineret.i.kreds.nr = nomineret.i.kreds.nr,
ran.last.election = ran.last.election,
UDDANNELSE__Efter.folkeskolereformen.får.eleverne.for.lange.skoledage = UDDANNELSE__Efter.folkeskolereformen.får.eleverne.for.lange.skoledage,
FOREBYGGELSE__Afgiften.på.cigaretter.skal.sættes.op = FOREBYGGELSE__Afgiften.på.cigaretter.skal.sættes.op,
SUNDHED__Et.besøg.hos.den.praktiserende.læge.skal.koste.eksempelvis.100.kr. = SUNDHED__Et.besøg.hos.den.praktiserende.læge.skal.koste.eksempelvis.100.kr.,
VELFÆRD__Mere.af.ældreplejen.skal.udliciteres.til.private.virksomheder = VELFÆRD__Mere.af.ældreplejen.skal.udliciteres.til.private.virksomheder,
ARBEJDSMARKED__Man.skal.hurtigere.kunne.genoptjene.retten.til.dagpenge = ARBEJDSMARKED__Man.skal.hurtigere.kunne.genoptjene.retten.til.dagpenge,
ARBEJDSMARKED__Virksomheder.skal.kunne.drages.til.ansvar.for..om.deres.udenlandske.underleverandører.i.Danmark.overholder.danske.regler.om.løn..moms.og.skat = ARBEJDSMARKED__Virksomheder.skal.kunne.drages.til.ansvar.for..om.deres.udenlandske.underleverandører.i.Danmark.overholder.danske.regler.om.løn..moms.og.skat,
ØKONOMI__Vækst.i.den.offentlige.sektor.er.vigtigere.end.skattelettelser = ØKONOMI__Vækst.i.den.offentlige.sektor.er.vigtigere.end.skattelettelser,
TRAFIK__Investeringer.i.kollektiv.trafik.skal.prioriteres.højere.end.investeringer.til.fordel.for.privatbilisme = TRAFIK__Investeringer.i.kollektiv.trafik.skal.prioriteres.højere.end.investeringer.til.fordel.for.privatbilisme,
RET__Straffen.for.grov.vold.og.voldtægt.skal.skærpes = RET__Straffen.for.grov.vold.og.voldtægt.skal.skærpes,
SOCIAL__Kontanthjælpen.skal.sænkes..så.den.økonomiske.gevinst.ved.at.arbejde.bliver.større = SOCIAL__Kontanthjælpen.skal.sænkes..så.den.økonomiske.gevinst.ved.at.arbejde.bliver.større,
INTEGRATION__Offentlige.institutioner.i.Danmark.tager.for.mange.hensyn.til.religiøse.minoriteter = INTEGRATION__Offentlige.institutioner.i.Danmark.tager.for.mange.hensyn.til.religiøse.minoriteter,
EU__EU.bestemmer.for.meget.i.forhold.til.dansk.lov = EU__EU.bestemmer.for.meget.i.forhold.til.dansk.lov,
UDVIKLING__Ulandsbistanden.skal.sænkes = UDVIKLING__Ulandsbistanden.skal.sænkes,
MILJØ__Indsatsen.for.at.forbedre.miljøet.skal.gå.forud.for.økonomisk.vækst = MILJØ__Indsatsen.for.at.forbedre.miljøet.skal.gå.forud.for.økonomisk.vækst,
KULTUR__Den.offentlige.kulturstøtte.skal.sænkes = KULTUR__Den.offentlige.kulturstøtte.skal.sænkes
)
ncol(final)
write.table(x = final, file = "dk_ft15_politician_responses.csv", fileEncoding = "UTF-8", sep = ",", row.names = FALSE)
write.table(x = final, file = "dk_ft15_politician_responses.csv", fileEncoding = "UTF-8", sep = ",", row.names = FALSE)
rm( list = all())
rm( list = ks())
rm( list = ls())
Sys.setlocale(category = "LC_ALL", locale = "UTF-8")
library("plyr")
library("rvest")
library("dplyr")
library("ggplot2")
data.org <- read.csv(file = "dk_ft15_politician_responses.csv", header = TRUE) #Load the raw dataset
data <- data.org #Load a "working" dataset
names(data)
for (i in 17:31){
data[,i] <- data[,i] %>%
gsub(x = ., pattern = "Helt enig", replacement = 5) %>%
gsub(x = ., pattern = "Delvist enig", replacement = 4) %>%
gsub(x = ., pattern = "Hverken enig eller uenig", replacement = 3) %>%
gsub(x = ., pattern = "Delvist uenig", replacement = 2) %>%
gsub(x = ., pattern = "Helt uenig", replacement = 1)
}
for (i in 17:31){
data[,i] <- as.numeric(data[,i])    #define as numeric
}
colormapping <- c(
"red",
"darkorchid4",
"lightgreen",
"hotpink",
"cyan1"     ,
"grey"       ,
"yellow"      ,
"darkblue"     ,
"orange"     ,
"darkolivegreen4",
"lightgrey"
)
unique(as.character(data$party))
names(colormapping) <- unique(as.character(data$party)) # Naming the elements in the character vector,
## Create partyname mapping to use for later plotting
namemapping <- c(
"Socialdemokratiet",
"Radikale",
"Konservative",
"SF",
"Liberal Alliance"     ,
"Kristendemokraterne"       ,
"Dansk Folkeparti"      ,
"Venstre"     ,
"Enhedslisten"     ,
"Alternativet",
"Uden for partierne"
)
names(namemapping) <- unique(as.character(data$party)) # Naming the elements in the character vector,
# for ggplot2 to call later.
cbind(names(data)[1:3])
names(data)
response.vars <- names(data)[17:31]
other.vars <- names(data)[1:16]
party.means <- data %>%
filter(party != 1) %>%
group_by(party) %>%
summarize_each(funs(mean), -other.vars)
party.means <- data %>%
filter(party != 1) %>%
group_by(party) %>%
summarize_each(funs(mean), -c(other.vars))
other.vars <- names(data)[1:16]
other.vars
party.means <- data %>%
filter(party != 1) %>%
group_by(party) %>%
summarize_each(funs(mean), -c(name, party, storkreds, lokalkreds, age, is.male,
title, location, elected, votes.oers, votes.all, valgt.nr,
stedfor.nr, opstillet.i.kreds.nr, nomineret.i.kreds.nr,
ran.last.election))
party.means <- data %>%
filter(party != 1) %>%
group_by(party) %>%
summarize_each(funs(mean), -c(name, party, storkreds, lokalkreds, age, is.male,
title, location, elected, votes.pers, votes.all, valgt.nr,
stedfor.nr, opstillet.i.kreds.nr, nomineret.i.kreds.nr,
ran.last.election))
labels <- data.frame(
question = names(party.means[2:16]),
position.y = 16:2+0.5, # position is based on the plot below
position.x = rep(3, 15) # position is based on the plot below
)
p <-  ggplot(data = party.means) #initatite plot
for(i in 2:16){
p <- p +
geom_point(aes_string(
y = 18-i,                                                   # Split questions by y-coordinates for each question
x = paste("party.means$", names(party.means)[i], sep = ""), # Let party means be x-axis
fill = "party"
), colour = "black", alpha=0.8, shape = 21, size = 10 )
}
p <- p + geom_text(data = labels,
aes( y = position.y, x = position.x, label = question),
size = 3)
p <- p +  scale_fill_manual ( values = colormapping )
#Titles and axis
p <- p +
theme_minimal() +
theme(axis.title.y  = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_blank(),
panel.grid.minor=element_blank(),
legend.position="top") +
scale_y_continuous(breaks=seq(1, 16, 1)) +
scale_x_continuous(breaks=c(1,3,5),
labels=c("Highly disagree", "Neither agree nor disagree", "Highly agree"))+
ggtitle("Mean response to survey \n questions, by party")
p
#Calculate 'centerness' NOTE: Requires above code to have been run already, to create party.means
party.middle <- party.means
party.middle[,2:16] <- abs(party.middle[,2:16]-3)  #Re-align around center (defining center = 0) and take absolutes
party.middle[,17] <- rowMeans(party.middle[,2:16]) #Compute averages
party.middle <- party.middle %>%
select( party = party, mean.dist.from.center = V17) #Select only the two relevant variables
p <- ggplot(data = party.middle, aes( x = reorder(party, mean.dist.from.center),
y = mean.dist.from.center, fill = party)) +
geom_bar(stat = "identity",
color = "black"
) +
scale_fill_manual( values = colormapping) +
coord_flip() +
theme_minimal() +
ylab("Average distance from 'neither agree nor disagree',\n on 0-2 scale") +
xlab("")+
ggtitle("What parties have the most extreme opinions?")
p
data.pc <- data
pc <- princomp(data[,17:31], cor=TRUE, scores=TRUE)
data.pc <- data
data.pc[32:36] <- pc$scores[,1:5]
data.pc = filter(data.pc, party!="1") #Filter away candidates outside the parties
p <- ggplot(data = data.pc, aes(x = data.pc[,32], y = data.pc[,33] )) +
geom_point(aes(fill = party), colour = "black", alpha=0.8, shape = 21, size = 10) +
scale_fill_manual(values = colormapping) +
theme_minimal()
p
p <- ggplot(data = data.pc, aes(x = data.pc[,32], y = data.pc[,33], size = sqrt(votes/pi))) +
geom_point(aes(fill = party), colour = "black",
alpha=0.8, shape = 21) +
scale_size_continuous( range = c(1,25) ) +
scale_fill_manual(values = colormapping) +
theme_minimal() +
theme(legend.position = "none") +
facet_wrap(~ party)
p
p <- ggplot(data = data.pc, aes(x = data.pc[,32], y = data.pc[,33], size = sqrt(pers.votes/pi))) +
geom_point(aes(fill = party), colour = "black",
alpha=0.8, shape = 21) +
scale_size_continuous( range = c(1,25) ) +
scale_fill_manual(values = colormapping) +
theme_minimal() +
theme(legend.position = "none") +
facet_wrap(~ party)
p
p <- ggplot(data = data.pc, aes(x = data.pc[,32], y = data.pc[,33], size = sqrt(votes.pers/pi))) +
geom_point(aes(fill = party), colour = "black",
alpha=0.8, shape = 21) +
scale_size_continuous( range = c(1,25) ) +
scale_fill_manual(values = colormapping) +
theme_minimal() +
theme(legend.position = "none") +
facet_wrap(~ party)
p
library(ggfortify)
autoplot(prcomp(data[,17:31]), loadings = TRUE, loadings.colour = 'blue',
loadings.label = TRUE, loadings.label.size = 3)
library(rpart)
set.seed(1)
train <- sample( x = 1:nrow(data), size = 2/3 * nrow(data), replace = FALSE)
data.train <- data[train, ]
data.test <- data[-train,]
model = rpart(party ~ ., data = data.train[,c(3,17:31)], method = "class")
partychoice = predict(model, newdata = data.test[,c(3,17:31)], type = "class")
summary(model)
library(rpart)
set.seed(1)
train <- sample( x = 1:nrow(data), size = 2/3 * nrow(data), replace = FALSE)
data.train <- data[train, ]
data.test <- data[-train,]
train <- sample( x = 1:nrow(data), size = 2/3 * nrow(data), replace = FALSE)
data.train <- data[train, ]
data.test <- data[-train,]
model = rpart(party ~ ., data = data.train[,c(3,17:31)], method = "class")
names(data.train)
model = rpart(party ~ ., data = data.train[,c(2,17:31)], method = "class")
partychoice = predict(model, newdata = data.test[,c(2,17:31)], type = "class")
summary(model)
library("rpart.plot")
prp(model, type = 4, extra = 2, nn = TRUE)
resp.var <- data[,17:31] %>%
var() %>%
diag() %>%
sqrt() %>%
t()
rownames(resp.var) <- "Standard Deviation"
resp.var
rm( list = ls())
test <- c(1, 2, 3)
test^2
test*test
data.org <- read.csv(file = "dk_ft15_politician_responses.csv", header = TRUE) #Load the raw dataset
data <- data.org #Load a "working" dataset
## Map responses to Likert-scale-style numeric
for (i in 17:31){
data[,i] <- data[,i] %>%
gsub(x = ., pattern = "Helt enig", replacement = 5) %>%
gsub(x = ., pattern = "Delvist enig", replacement = 4) %>%
gsub(x = ., pattern = "Hverken enig eller uenig", replacement = 3) %>%
gsub(x = ., pattern = "Delvist uenig", replacement = 2) %>%
gsub(x = ., pattern = "Helt uenig", replacement = 1)
}
for (i in 17:31){
data[,i] <- as.numeric(data[,i])    #define as numeric
}
## Create mapping of response variables,
#    Use this to copy into code: -c(name, party, storkreds, lokalkreds, age, is.male,
#                                   title, location, elected, votes.pers, votes.all, valgt.nr,
#                                   stedfor.nr, opstillet.i.kreds.nr, nomineret.i.kreds.nr,
#                                   ran.last.election)
## Create colormapping to use for later plotting
colormapping <- c(
"red",
"darkorchid4",
"lightgreen",
"hotpink",
"cyan1"     ,
"grey"       ,
"yellow"      ,
"darkblue"     ,
"orange"     ,
"darkolivegreen4",
"lightgrey"
)
names(colormapping) <- unique(as.character(data$party)) # Naming the elements in the character vector,
# for ggplot2 to call later.
## Create partyname mapping to use for later plotting
namemapping <- c(
"Socialdemokratiet",
"Radikale",
"Konservative",
"SF",
"Liberal Alliance"     ,
"Kristendemokraterne"       ,
"Dansk Folkeparti"      ,
"Venstre"     ,
"Enhedslisten"     ,
"Alternativet",
"Uden for partierne"
)
names(namemapping) <- unique(as.character(data$party)) # Naming the elements in the character vector,
# for ggplot2 to call later.
names(data)
distance.df <- data[,c(1,17:31)]
names(distance.df)[2:16] <- 1:15
names(distance.df)
distance.df <- data[,c(17:31)] #Select only relevant columns
distance.df <- data[,c(17:31)] #Select only relevant columns
rownames.df <- data[1,]
distance.df <- data[,c(17:31)] #Select only relevant columns
rownames(df) <- data[1,]
distance.df <- data[,c(17:31)] #Select only relevant columns
rownames(distance.df) <- data[1,]
nrow(distance.df)
nrow(data)
data[,1]
rownames(distance.df) <- data[,1]
distance.df <- data[,c(17:31)] #Select only relevant columns
rownames(distance.df) <- data[,1]
View(distance.df)
View(data)
duplicated(data[,1])
data[,1][duplicated(data[,1])]
distance.df <- unique(data[,c(17:31)]) #Select only relevant columns
distance.df <- data[,c(17:31)] #Select only relevant columns
distance.df <- data[,c(17:31)] #Select only relevant columns
distance.df <- data[duplicated(data[,1]) == FALSE]
distance.df <- data[[duplicated(data[,1]) == FALSE]]
distance.df <- data[,1:nrow(data)][duplicated(data[,1]) == FALSE]
distance.df <- data[duplicated(data[,1]) == FALSE,]
rm( list = all)
rm( list = ls())
Sys.setlocale(category = "LC_ALL", locale = "UTF-8")
library("plyr")
library("rvest")
library("dplyr")
library("ggplot2")
data.org <- read.csv(file = "dk_ft15_politician_responses.csv", header = TRUE) #Load the raw dataset
data <- data.org #Load a "working" dataset
## Map responses to Likert-scale-style numeric
for (i in 17:31){
data[,i] <- data[,i] %>%
gsub(x = ., pattern = "Helt enig", replacement = 5) %>%
gsub(x = ., pattern = "Delvist enig", replacement = 4) %>%
gsub(x = ., pattern = "Hverken enig eller uenig", replacement = 3) %>%
gsub(x = ., pattern = "Delvist uenig", replacement = 2) %>%
gsub(x = ., pattern = "Helt uenig", replacement = 1)
}
for (i in 17:31){
data[,i] <- as.numeric(data[,i])    #define as numeric
}
## Create mapping of response variables,
#    Use this to copy into code: -c(name, party, storkreds, lokalkreds, age, is.male,
#                                   title, location, elected, votes.pers, votes.all, valgt.nr,
#                                   stedfor.nr, opstillet.i.kreds.nr, nomineret.i.kreds.nr,
#                                   ran.last.election)
## Create colormapping to use for later plotting
colormapping <- c(
"red",
"darkorchid4",
"lightgreen",
"hotpink",
"cyan1"     ,
"grey"       ,
"yellow"      ,
"darkblue"     ,
"orange"     ,
"darkolivegreen4",
"lightgrey"
)
names(colormapping) <- unique(as.character(data$party)) # Naming the elements in the character vector,
# for ggplot2 to call later.
## Create partyname mapping to use for later plotting
namemapping <- c(
"Socialdemokratiet",
"Radikale",
"Konservative",
"SF",
"Liberal Alliance"     ,
"Kristendemokraterne"       ,
"Dansk Folkeparti"      ,
"Venstre"     ,
"Enhedslisten"     ,
"Alternativet",
"Uden for partierne"
)
names(namemapping) <- unique(as.character(data$party)) # Naming the elements in the character vector,
# for ggplot2 to call later.
duplicated(data$name)
data[,1][duplicated(data[,1]) == TRUE]
data[,1][duplicated(data) == TRUE]
data[][duplicated(data) == TRUE]
data[duplicated(data) == TRUE]
unique(data)
322 + 402
data.org <- read.csv(file = "dk_ft15_politician_responses.csv", header = TRUE) #Load the raw dataset
data <- unique(data.org) #Load a "working" dataset
data[,1][duplicated(data[,1]) == TRUE]
data <- unique(data.org) #Load a "working" dataset
data <- data[,1:nrow(data)][duplicated(data[,1]) == FALSE]
data <- data[,1:ncol(data)][duplicated(data[,1]) == FALSE]
data <- unique(data.org) #Load a "working" dataset
data <- data[,1:ncol(data)]
data <- unique(data.org) #Load a "working" dataset
data <- data[,1:ncol(data)]
data <- unique(data.org) #Load a "working" dataset
data <- data[1:nrow(data),][duplicated(data[,1]) == FALSE]
duplicated(data[,1])
data <- data[1:nrow(data),][duplicated(data[,1])]
as.numeric(duplicated(data[,1]))
data <- data[1:nrow(data),][as.numeric(duplicated(data[,1])) == 0]
duplicated(data[,1]) == 0
data[1:nrow(data),]
data <- data %>%
group_by(name) %>%
filter(row_number() == 1 )
View(data.org)
data.org <- read.csv(file = "dk_ft15_politician_responses.csv", header = TRUE) #Load the raw dataset
data <- unique(data.org) # Load a "working" dataset, while removing duplicate entries
data <- data %>%         # A candidate, Kristian Andersen, has several entries, these are removed
group_by(name) %>%
filter(row_number() == 1 )
## Map responses to Likert-scale-style numeric
for (i in 17:31){
data[,i] <- data[,i] %>%
gsub(x = ., pattern = "Helt enig", replacement = 5) %>%
gsub(x = ., pattern = "Delvist enig", replacement = 4) %>%
gsub(x = ., pattern = "Hverken enig eller uenig", replacement = 3) %>%
gsub(x = ., pattern = "Delvist uenig", replacement = 2) %>%
gsub(x = ., pattern = "Helt uenig", replacement = 1)
}
for (i in 17:31){
data[,i] <- as.numeric(data[,i])    #define as numeric
}
## Create mapping of response variables,
#    Use this to copy into code: -c(name, party, storkreds, lokalkreds, age, is.male,
#                                   title, location, elected, votes.pers, votes.all, valgt.nr,
#                                   stedfor.nr, opstillet.i.kreds.nr, nomineret.i.kreds.nr,
#                                   ran.last.election)
## Create colormapping to use for later plotting
colormapping <- c(
"red",
"darkorchid4",
"lightgreen",
"hotpink",
"cyan1"     ,
"grey"       ,
"yellow"      ,
"darkblue"     ,
"orange"     ,
"darkolivegreen4",
"lightgrey"
)
names(colormapping) <- unique(as.character(data$party)) # Naming the elements in the character vector,
# for ggplot2 to call later.
## Create partyname mapping to use for later plotting
namemapping <- c(
"Socialdemokratiet",
"Radikale",
"Konservative",
"SF",
"Liberal Alliance"     ,
"Kristendemokraterne"       ,
"Dansk Folkeparti"      ,
"Venstre"     ,
"Enhedslisten"     ,
"Alternativet",
"Uden for partierne"
)
names(namemapping) <- unique(as.character(data$party)) # Naming the elements in the character vector,
# for ggplot2 to call later.
distance.df <- data
rm(distance.df)
df.distance <- data
df.distance <- data[,c(17:31)]
rownames(distance.df) <- data[,1]
rownames(df.distance) <- data[,1]
length(rownames(df.distance))
length(data[,1])
data[,1]
rownames(df.distance) <- t(data[,1])
names(distance.df)[2:16] <- 1:15 #Simplify variable names
names(df.distance)[1:15] <- 1:15 #Simplify variable names
View(df.distance)
df.distance <- data[,c(17:31)] #Select only questions
df.distance <- data[,17:31] #Select only questions
rownames(df.distance) <- t(data[,1]) #Set names of rows equal to candidates' names
names(df.distance)[1:15] <- 1:15 #Simplify variable names
data.org <- read.csv(file = "dk_ft15_politician_responses.csv", header = TRUE) #Load the raw dataset
data <- unique(data.org) # Load a "working" dataset, while removing duplicate entries
data <- data %>%         # A candidate, Kristian Andersen, has several entries, these are removed. NOTE: This removes one candidate
group_by(name) %>%
filter(row_number() == 1 ) %>% # Method: data is grouped on name variable, and groups with >1 name are discarded
ungroup ()
for (i in 17:31){
data[,i] <- data[,i] %>%
gsub(x = ., pattern = "Helt enig", replacement = 5) %>%
gsub(x = ., pattern = "Delvist enig", replacement = 4) %>%
gsub(x = ., pattern = "Hverken enig eller uenig", replacement = 3) %>%
gsub(x = ., pattern = "Delvist uenig", replacement = 2) %>%
gsub(x = ., pattern = "Helt uenig", replacement = 1)
}
names(data)
data <- unique(data.org) # Load a "working" dataset, while removing duplicate entries
data <- data %>%         # A candidate, Kristian Andersen, has several entries, these are removed. NOTE: This removes one candidate
group_by(name) %>%
filter(row_number() == 1 ) %>% # Method: data is grouped on name variable, and groups with >1 name are discarded
ungroup ()
for (i in 17:31){
data[,i] <- data[,i] %>%
gsub(x = ., pattern = "Helt enig", replacement = 5)
}
data.org <- read.csv(file = "dk_ft15_politician_responses.csv", header = TRUE) #Load the raw dataset
data <- unique(data.org) # Load a "working" dataset, while removing duplicate entries
data <- data %>%         # A candidate, Kristian Andersen, has several entries, these are removed. NOTE: This removes one candidate
group_by(name) %>%
filter(row_number() == 1 ) %>% # Method: data is grouped on name variable, and groups with >1 name are discarded
ungroup ()
str(data)
for (i in 17:31){
data[,i] <- data[,i] %>%
gsub(x = as.character(.), pattern = "Helt enig", replacement = 5)
}
data.org <- read.csv(file = "dk_ft15_politician_responses.csv", header = TRUE) #Load the raw dataset
data <- unique(data.org) # Load a "working" dataset, while removing duplicate entries
data <- data %>%         # A candidate, Kristian Andersen, has several entries, these are removed. NOTE: This removes one candidate
group_by(name) %>%
filter(row_number() == 1 ) %>% # Method: data is grouped on name variable, and groups with >1 name are discarded
ungroup ()
gsub(x = data[,18], pattern = "Helt enig", replacement = 5)
gsub(x = data[,18], pattern = "Helt enig", replacement = "LOOOOL")
